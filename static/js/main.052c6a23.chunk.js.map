{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/FindMovie/FindMovie.js","api/fetchData.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","FindMovie","addMovie","useState","setTitle","setMovie","notFound","setNotFound","htmlFor","onChange","event","target","value","type","id","placeholder","cn","onClick","fetch","then","resp","json","getMovie","movieFromApi","Response","Title","Plot","Poster","imdbID","App","data","setMovies","newMovie","some","ReactDOM","render","document","getElementById"],"mappings":"+wEAIaA,G,kBAAY,SAAC,GAAD,IACvBC,EADuB,EACvBA,MADuB,IAEvBC,mBAFuB,MAET,GAFS,EAGvBC,EAHuB,EAGvBA,OACAC,EAJuB,EAIvBA,QAJuB,OAMvB,yBAAKC,UAAU,QACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,iBAChB,yBACEC,IAAKH,EACLI,IAAI,gBAIV,yBAAKF,UAAU,gBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,kBAChB,yBACEC,IAAI,wBACJC,IAAI,WAIV,yBAAKF,UAAU,iBACb,uBAAGA,UAAU,cAAcJ,KAI/B,yBAAKI,UAAU,WACZH,EACD,6BACA,uBAAGM,KAAMJ,GAAT,aC/BKK,EAAa,SAAC,GAAD,QACxBC,cADwB,MACf,GADe,SAGxB,yBAAKL,UAAU,UACZK,EAAOC,KAAI,SAAAC,GAAK,OACf,kBAAC,EAAD,eAAWC,IAAKD,EAAME,QAAYF,S,sBCFjC,IAAMG,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACfC,mBAAS,IADM,mBAClChB,EADkC,KAC3BiB,EAD2B,OAEfD,mBAAS,MAFM,mBAElCL,EAFkC,KAE3BO,EAF2B,OAGTF,oBAAS,GAHA,mBAGlCG,EAHkC,KAGxBC,EAHwB,KA0BzC,OACE,oCACE,0BAAMhB,UAAU,cACd,yBAAKA,UAAU,SACb,2BAAOA,UAAU,QAAQiB,QAAQ,eAAjC,eAIA,yBAAKjB,UAAU,WACb,2BACEkB,SAAU,SAACC,GACTN,EAASM,EAAMC,OAAOC,OACtBL,GAAY,IAEdK,MAAOzB,EACP0B,KAAK,OACLC,GAAG,cACHC,YAAY,0BACZxB,UAAWyB,IAAG,QAAS,CACrB,YAAaV,OAMjBA,GACE,uBAAGf,UAAU,kBAAb,yCAQN,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,WACb,4BACE0B,QA1DO,YCZd,SAAkB9B,GACvB,OAAO+B,MAAM,GAAD,OAHG,0CAGH,cAAkB/B,IAC3BgC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,WDWnBC,CAASnC,GACNgC,MAAK,SAACI,GACyB,UAA1BA,EAAaC,UAMjBjB,GAAY,GAEZF,EAAS,CACPlB,MAAOoC,EAAaE,MACpBrC,YAAamC,EAAaG,KAC1BrC,OAAQkC,EAAaI,OACrBrC,QAAQ,8BAAD,OAAgCiC,EAAaK,OAA7C,KACP5B,OAAQuB,EAAaK,UAZrBrB,GAAY,OAuDRM,KAAK,SACLtB,UAAU,mBAHZ,iBASF,yBAAKA,UAAU,WACb,4BACE0B,QAAS,WACPf,EAASJ,GACTM,EAAS,KAEXS,KAAK,SACLtB,UAAU,qBANZ,sBAcN,yBAAKA,UAAU,aACb,wBAAIA,UAAU,SAAd,WAEEO,GACE,kBAAC,EAAcA,M,OE7Fd+B,EAAM,WAAO,IAAD,EACK1B,mBAAS,YAAI2B,IADlB,mBAChBlC,EADgB,KACRmC,EADQ,KAWvB,OACE,yBAAKxC,UAAU,QACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAYK,OAAQA,KAEtB,yBAAKL,UAAU,WACb,kBAAC,EAAD,CAAWW,SAdG,SAAC8B,GACfpC,EAAOqC,MAAK,SAAAnC,GAAK,OAAIA,EAAME,SAAWgC,EAAShC,WAInD+B,EAAU,GAAD,mBAAKnC,GAAL,CAAaoC,WCT1BE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.052c6a23.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport './FindMovie.scss';\n\nimport { MovieCard } from '../MovieCard';\nimport { getMovie } from '../../api/fetchData';\n\nexport const FindMovie = ({ addMovie }) => {\n  const [title, setTitle] = useState('');\n  const [movie, setMovie] = useState(null);\n  const [notFound, setNotFound] = useState(false);\n\n  const fetchMovie = () => {\n    getMovie(title)\n      .then((movieFromApi) => {\n        if (movieFromApi.Response === 'False') {\n          setNotFound(true);\n\n          return;\n        }\n\n        setNotFound(false);\n\n        setMovie({\n          title: movieFromApi.Title,\n          description: movieFromApi.Plot,\n          imgUrl: movieFromApi.Poster,\n          imdbUrl: `https://www.imdb.com/title/${movieFromApi.imdbID}/`,\n          imdbId: movieFromApi.imdbID,\n        });\n      });\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              onChange={(event) => {\n                setTitle(event.target.value);\n                setNotFound(false);\n              }}\n              value={title}\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={cn('input', {\n                'is-danger': notFound,\n              })}\n            />\n          </div>\n\n          {\n            notFound && (\n              <p className=\"help is-danger\">\n                Can&apos;t find a movie with such a title\n              </p>\n            )\n          }\n\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              onClick={fetchMovie}\n              type=\"button\"\n              className=\"button is-light\"\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              onClick={() => {\n                addMovie(movie);\n                setTitle('');\n              }}\n              type=\"button\"\n              className=\"button is-primary\"\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">Preview</h2>\n        {\n          movie && (\n            <MovieCard {...movie} />\n          )\n        }\n      </div>\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'http://www.omdbapi.com/?apikey=81ba3e21';\n\nexport function getMovie(title) {\n  return fetch(`${BASE_URL}&t=${title}`)\n    .then(resp => resp.json());\n}\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState([...data]);\n\n  const addNewMovie = (newMovie) => {\n    if (movies.some(movie => movie.imdbId === newMovie.imdbId)) {\n      return;\n    }\n\n    setMovies([...movies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie addMovie={addNewMovie} />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}